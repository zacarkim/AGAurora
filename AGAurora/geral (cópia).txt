#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
#include <stdio.h>
#include <string>

using namespace cv;
using namespace std;

/// Global variables
string source_window = "Source image";
string warp_window = "Warp";
string warp_rotate_window = "Warp + Rotate";


 int main( int argc, char** argv )
 {
   Point2f srcTri[3];
   Point2f dstTri[3];

   Mat rot_mat( 2, 3, CV_32FC1 );
   Mat warp_mat( 2, 3, CV_32FC1 );
   Mat src, warp_dst, warp_rotate_dst;

   /// Load the image
   src = imread( argv[1], 0 );
   imshow( "ggggg", src );

   /// Set the dst image the same type and size as src
   warp_dst = Mat::zeros( src.rows, src.cols, src.type() );

   /// Set your 3 points to calculate the  Affine Transform
   srcTri[0] = Point2f( 0,0 );
   srcTri[1] = Point2f( src.cols - 1, 0 );
   srcTri[2] = Point2f( 0, src.rows - 1 );
   
   dstTri[0] = Point2f( src.cols*0.0, src.rows*0.5 );
   dstTri[1] = Point2f( src.cols*0.5, src.rows*0.5 );
   dstTri[2] = Point2f( src.cols*0.0, src.rows*0.0 );

   //~ dstTri[0] = Point2f( src.cols*0.0, src.rows*0.33 );
   //~ dstTri[1] = Point2f( src.cols*0.85, src.rows*0.25 );
   //~ dstTri[2] = Point2f( src.cols*0.15, src.rows*0.7 );
 //  dstTri[3] = Point2f( src.cols*0.10, src.rows*0.1 );

   /// Get the Affine Transform
//   warp_mat = getPerspectiveTransform(srcTri, dstTri);
   warp_mat = getAffineTransform( srcTri, dstTri );

   /// Apply the Affine Transform just found to the src image
//  warpPerspective(input,output,lambda,output.size() );
   warpAffine( src, warp_dst, warp_mat, warp_dst.size() );

   /* Rotating the image after Warp */

   /// Compute a rotation matrix with respect to the center of the image
   Point center = Point( warp_dst.cols/2, warp_dst.rows/2 );
   double angle = -90.0;
   double scale = 0.8;

   /// Get the rotation matrix with the specifications above
   rot_mat = getRotationMatrix2D( center, angle, scale );

   /// Rotate the warped image
   warpAffine( warp_dst, warp_rotate_dst, rot_mat, warp_dst.size() );

   /// Show what you got
   namedWindow( source_window, WINDOW_AUTOSIZE );
   imshow( source_window, src );

   namedWindow( warp_window, WINDOW_AUTOSIZE );
   imshow( warp_window, warp_dst );

   namedWindow( warp_rotate_window, WINDOW_AUTOSIZE );
   imshow( warp_rotate_window, warp_rotate_dst );

   /// Wait until user exits the program
   waitKey(0);

   return 0;
  }


// ------------------------------------------------------

//~ #include <opencv2/core/core.hpp>
//~ #include <opencv2/viz/vizcore.hpp>
//~ 
//~ int main()
//~ {
    //~ cv::viz::Viz3d window = cv::viz::Viz3d("Viz demonstration");
//~ 
    //~ cv::Point3d min(0.25, 0.0, 0.25);
    //~ cv::Point3d max(0.75, 0.5, 0.75);
//~ 
    //~ cv::viz::WCube cube(min, max, true, cv::viz::Color::blue());
    //~ cube.setRenderingProperty(cv::viz::LINE_WIDTH, 4.0);
//~ 
    //~ window.showWidget("Axis widget", cv::viz::WCoordinateSystem());
    //~ window.showWidget("Cube widget", cube);
//~ 
    //~ while(!window.wasStopped()) {
        //~ window.spinOnce(1, true);
    //~ }
//~ 
    //~ return 0;
//~ }

//~ #include <opencv2/core/core.hpp>
//~ #include <opencv2/imgproc/imgproc.hpp>
//~ #include <opencv2/highgui/highgui.hpp>
//~ #include <opencv2/viz/vizcore.hpp>
//~ #include <cv.h>
//~ #include <cxcore.h>
//~ 
//~ 
//~ #include <iostream>
//~ 
//~ using namespace cv;
//~ using namespace std;
//~ 
//~ Mat fourier(char* filename);
//~ 
//~ static void help(char* progName)
//~ {
    //~ cout << endl
        //~ <<  "This program demonstrated the use of the discrete Fourier transform (DFT). " << endl
        //~ <<  "The dft of an image is taken and it's power spectrum is displayed."          << endl
        //~ <<  "Usage:"                                                                      << endl
        //~ << progName << " [image_name -- default lena.jpg] "                       << endl << endl;
//~ }
//~ 
//~ int main(int argc, char ** argv)
//~ {
    //~ help(argv[0]);
//~ 
    //~ char* filename1 = argv[1];
    //~ char* filename2 = argv[2];
	//~ 
	//~ Mat f1 = fourier(filename1);
	//~ Mat f2 = fourier(filename2);
	//~ Mat dst;
	//~ 
	//~ 
	//~ imshow("I1", f1);
//~ //	const Size& window_size = Size(500, 500);
//~ //	showImage(f1, window_size);
//~ //	waitKey();
	//~ imshow("I2", f2);
	//~ absdiff(f1, f2, dst);	
	//~ imshow("DiferenÃ§a", dst);	
	//~ dst = f1 - f2;
	//~ imshow("menos", dst);
	//~ waitKey();
	//~ return(0);
    //~ 
//~ }
//~ 
//~ Mat fourier(char* filename) {
	//~ Mat I = imread(filename, CV_BGR2GRAY);
    //~ 
//~ 
    //~ Mat padded;                            //expand input image to optimal size
    //~ int m = getOptimalDFTSize( I.rows );
    //~ int n = getOptimalDFTSize( I.cols ); // on the border add zero values
    //~ copyMakeBorder(I, padded, 0, m - I.rows, 0, n - I.cols, BORDER_CONSTANT, Scalar::all(0));
//~ 
    //~ Mat planes[] = {Mat_<float>(padded), Mat::zeros(padded.size(), CV_32F)};
    //~ Mat complexI;
    //~ merge(planes, 2, complexI);         // Add to the expanded another plane with zeros
//~ 
    //~ dft(complexI, complexI);            // this way the result may fit in the source matrix
//~ 
    //~ // compute the magnitude and switch to logarithmic scale
    //~ // => log(1 + sqrt(Re(DFT(I))^2 + Im(DFT(I))^2))
    //~ split(complexI, planes);                   // planes[0] = Re(DFT(I), planes[1] = Im(DFT(I))
    //~ magnitude(planes[0], planes[1], planes[0]);// planes[0] = magnitude
    //~ Mat magI = planes[0];
//~ 
    //~ magI += Scalar::all(1);                    // switch to logarithmic scale
    //~ log(magI, magI);
//~ 
    //~ // crop the spectrum, if it has an odd number of rows or columns
    //~ magI = magI(Rect(0, 0, magI.cols & -2, magI.rows & -2));
//~ 
    //~ // rearrange the quadrants of Fourier image  so that the origin is at the image center
    //~ int cx = magI.cols/2;
    //~ int cy = magI.rows/2;
//~ 
    //~ Mat q0(magI, Rect(0, 0, cx, cy));   // Top-Left - Create a ROI per quadrant
    //~ Mat q1(magI, Rect(cx, 0, cx, cy));  // Top-Right
    //~ Mat q2(magI, Rect(0, cy, cx, cy));  // Bottom-Left
    //~ Mat q3(magI, Rect(cx, cy, cx, cy)); // Bottom-Right
//~ 
    //~ Mat tmp;                           // swap quadrants (Top-Left with Bottom-Right)
    //~ q0.copyTo(tmp);
    //~ q3.copyTo(q0);
    //~ tmp.copyTo(q3);
//~ 
    //~ q1.copyTo(tmp);                    // swap quadrant (Top-Right with Bottom-Left)
    //~ q2.copyTo(q1);
    //~ tmp.copyTo(q2);
//~ 
    //~ normalize(magI, magI, 0, 1, CV_MINMAX); // Transform the matrix with float values into a
                                            //~ // viewable image form (float between values 0 and 1).
//~ 
//~ //    imshow("Input Image"       , I   );    // Show the result
//~ //    imshow("spectrum magnitude", magI);
//~ 
    //~ return(magI);
//~ }

/* 
#include <cv.h>
#include <cxcore.h>
#include <highgui.h>

#include "opencv2/imgproc/imgproc.hpp"

#include <string>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <sstream>
#include <math.h>

using namespace cv;
using namespace std;

void camera();
void imagem(string srcFrame1, string srcFrame2);


void camera() {
	VideoCapture* cap = new VideoCapture(0);
	cap->set(CV_CAP_PROP_FRAME_WIDTH, 1280);
	cap->set(CV_CAP_PROP_FRAME_HEIGHT, 720);
	//cap->set(CV_CAP_PROP_BRIGHTNESS, 100);

	namedWindow("web", 1);
	namedWindow("filtro", 1);
//	namedWindow("teste", 1);
	Mat frame;
	Mat cantos;
	for (;;) {
		*cap >> frame;
		imshow("web", frame);
		cvtColor(frame, frame, CV_BGR2GRAY);
//		imshow("teste", frame);
//		GaussianBlur(frame, cantos, Size(7, 7), 2.5, 2.5);
//		Canny(cantos, cantos, 0, 30, 3);
//		imshow("teste", cantos);
//		filtroSobel(frame);
//		filtroCanto(frame);
		imshow("filtro", frame);
		if (waitKey(30) >= 0)
			break;
	}
	delete cap;
}

void imagem(string srcFrame1, string srcFrame2) {
	Mat imageFrameUm = imread(srcFrame1, CV_LOAD_IMAGE_GRAYSCALE);
	Mat imageFrameDois = imread(srcFrame2, CV_LOAD_IMAGE_GRAYSCALE);

	namedWindow("FrameUm", 1);
	namedWindow("FrameDois", 1);
	namedWindow("Casamento Dois em Um", 1);
	
	imshow("FrameUm", imageFrameUm);
	imshow("FrameDois", imageFrameDois);
	
	int histograma[256];
	for (int z = 0; z < 256; z++) 
		histograma[z] = 0;
	Vector<int> numeroTons;
	
	for (int y = 0; y < imageFrameDois.rows; y++) 
	{
		for (int x = 0; x < imageFrameDois.cols; x++) 
		{
			int corPixel = imageFrameDois.at<uchar>(Point(x,y));
			histograma[corPixel]++;
			
//			numeroTons.push_back();
		}
	}
	//~ for (int z = 0; z < 256; z++) 
		//~ cout << histograma[z] << endl;
		
	for (int y = 0; y < imageFrameUm.rows; y++) 
	{
		for (int x = 0; x < imageFrameUm.cols; x++) 
		{
			int corPixel = imageFrameUm.at<uchar>(Point(x,y));
			if (histograma[corPixel] > 0)
			{
//				imageFrameUm.at<uchar>(Point(x,y)) = 0;
				histograma[corPixel]--;
			}
			else
			{
				imageFrameUm.at<uchar>(Point(x,y)) = 255;
			}
		}
	}
	imshow("Casamento Dois em Um", imageFrameUm);
	for (int z = 0; z < 256; z++)
		if (histograma[z] != 0)
			cout << histograma[z] << endl;
		 
	waitKey(0);
}


int main ( int argc , char* argv[] ) {

//	camera();
	imagem(string(argv[1]), string(argv[2]));
}
	
//    Mat imagePul = imread(string(argv[1]), CV_LOAD_IMAGE_GRAYSCALE);
	
    //Canny( imgManipulada, imgManipulada, 50, 20*3, 3 );
    //threshold(imgManipulada, imgManipulada, 50,255,1);
	
	//threshold(imgManipulada, imgManipulada, 80,255,1); //THRESH_OTSU
   
    //namedWindow( "I1", CV_WINDOW_NORMAL ); //CV_WINDOW_KEEPRATIO


    //rectangle(mostra, win, Scalar(255,255,255), 1, 8 );

    //imwrite("../projetoFinalPI/Assinaturas/Teste/Demo/demo.png", saida); * / */




